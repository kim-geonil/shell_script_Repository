# ========================================
# NCU Script Generator - Auto Generated Script
# ========================================
#
# Script ID: detect_acea447a-6271-420a-9303-cf3cbe1d609c
# Generated: 2025-10-13T05:14:42.760Z
# Asset Type: OS
# Script Type: OS-Linux
# Target Product: 보안 점검 대상
# Generated By: NCU Script Generator User
#
# File Information:
# - File Name: OS--보안-점검-대상--OSLinux-unknown-process.sh
# - Time-based Folder: 2025-10-13-14h
# - Full Path: /2025-10-13-14h/OS--보안-점검-대상--OSLinux-unknown-process.sh
#
# Configuration:
# - Target OS: Linux
# - Process Name: unknown-process
# - Config Path: /etc/default/config
# - Account Name: default-account
# - Output Format: bash
#
# Test Results:
# - Status: FAILED
# - Success Rate: 0%
# - Summary: [object Object]
#
# Pass Condition: Script executed successfully
# Fail Condition: Script execution failed
#
# ========================================

```bash
#!/bin/bash

# === 패스워드 복잡성 정책 설정 점검 스크립트 ===
# 스크립트 정보: U-02
# 생성 시간: $(date)
# 설정값 요약: 최소 길이 8, 최대 반복 3, 최소 대문자 1, 최소 소문자 1, 최소 숫자 1, 최소 특수문자 1

# 설정 파일 경로
PWQUALITY_CONF="/etc/security/pwquality.conf"
PAM_AUTH="/etc/pam.d/system-auth"

# 점검 결과 변수 초기화
RESULTS=()
STATUS="Good"
ISSUES=0

# 패스워드 복잡성 정책 점검 함수
check_pwquality_conf() {
    echo "1. 패스워드 복잡성 정책 설정 점검"
    
    if [[ ! -f $PWQUALITY_CONF ]]; then
        RESULTS+=("패스워드 복잡성 설정 파일이 존재하지 않습니다: $PWQUALITY_CONF")
        STATUS="Vulnerable"
        ((ISSUES++))
        return
    fi

    # 설정값 점검
    local min_length=$(grep -E '^min_length' $PWQUALITY_CONF | awk -F'=' '{print $2}' | xargs)
    local max_repeat=$(grep -E '^max_repeat' $PWQUALITY_CONF | awk -F'=' '{print $2}' | xargs)
    local min_upper=$(grep -E '^min_upper' $PWQUALITY_CONF | awk -F'=' '{print $2}' | xargs)
    local min_lower=$(grep -E '^min_lower' $PWQUALITY_CONF | awk -F'=' '{print $2}' | xargs)
    local min_digit=$(grep -E '^min_digit' $PWQUALITY_CONF | awk -F'=' '{print $2}' | xargs)
    local min_special=$(grep -E '^min_special' $PWQUALITY_CONF | awk -F'=' '{print $2}' | xargs)

    # 각 설정값 점검
    [[ "$min_length" -ge 8 ]] && RESULTS+=("최소 길이 설정: $min_length [PASS]") || { RESULTS+=("최소 길이 설정: $min_length [FAIL]"); STATUS="Vulnerable"; ((ISSUES++)); }
    [[ "$max_repeat" -le 3 ]] && RESULTS+=("최대 반복 설정: $max_repeat [PASS]") || { RESULTS+=("최대 반복 설정: $max_repeat [FAIL]"); STATUS="Vulnerable"; ((ISSUES++)); }
    [[ "$min_upper" -ge 1 ]] && RESULTS+=("최소 대문자 설정: $min_upper [PASS]") || { RESULTS+=("최소 대문자 설정: $min_upper [FAIL]"); STATUS="Vulnerable"; ((ISSUES++)); }
    [[ "$min_lower" -ge 1 ]] && RESULTS+=("최소 소문자 설정: $min_lower [PASS]") || { RESULTS+=("최소 소문자 설정: $min_lower [FAIL]"); STATUS="Vulnerable"; ((ISSUES++)); }
    [[ "$min_digit" -ge 1 ]] && RESULTS+=("최소 숫자 설정: $min_digit [PASS]") || { RESULTS+=("최소 숫자 설정: $min_digit [FAIL]"); STATUS="Vulnerable"; ((ISSUES++)); }
    [[ "$min_special" -ge 1 ]] && RESULTS+=("최소 특수문자 설정: $min_special [PASS]") || { RESULTS+=("최소 특수문자 설정: $min_special [FAIL]"); STATUS="Vulnerable"; ((ISSUES++)); }
}

# PAM 설정 점검 함수
check_pam_auth() {
    echo "2. PAM 설정 점검"
    
    if [[ ! -f $PAM_AUTH ]]; then
        RESULTS+=("PAM 설정 파일이 존재하지 않습니다: $PAM_AUTH")
        STATUS="Vulnerable"
        ((ISSUES++))
        return
    fi

    # pwquality 모듈 점검
    if grep -q "pam_pwquality.so" $PAM_AUTH; then
        RESULTS+=("PAM 설정에 pwquality 모듈이 포함되어 있습니다. [PASS]")
    else
        RESULTS+=("PAM 설정에 pwquality 모듈이 포함되어 있지 않습니다. [FAIL]")
        STATUS="Vulnerable"
        ((ISSUES++))
    fi
}

# 점검 수행
check_pwquality_conf
check_pam_auth

# === 점검 결과 출력 ===
echo "=== 패스워드 복잡성 정책 설정 점검 결과 ==="
for result in "${RESULTS[@]}"; do
    echo "$result"
done

# 결과 요약
echo "=== 점검 결과 요약 ==="
echo "전체 평가: $STATUS"
echo "발견된 문제: $ISSUES 개"
if [[ $STATUS == "Vulnerable" ]]; then
    echo "권장 조치사항: 패스워드 복잡성 정책을 강화하고 PAM 설정을 확인하세요."
fi
```