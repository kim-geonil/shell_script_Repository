# ========================================
# NCU Script Generator - Auto Generated Script
# ========================================
#
# Script ID: detect_caa5ec58-f7eb-4ac8-aa98-19c66760b053
# Generated: 2025-10-13T04:56:58.324Z
# Asset Type: OS
# Script Type: OS-Linux
# Target Product: 보안 점검 대상
# Generated By: NCU Script Generator User
#
# File Information:
# - File Name: OS--보안-점검-대상--OSLinux-unknown-process.sh
# - Time-based Folder: 2025-10-13-13h
# - Full Path: /2025-10-13-13h/OS--보안-점검-대상--OSLinux-unknown-process.sh
#
# Configuration:
# - Target OS: Linux
# - Process Name: unknown-process
# - Config Path: /etc/default/config
# - Account Name: default-account
# - Output Format: bash
#
# Test Results:
# - Status: FAILED
# - Success Rate: 0%
# - Summary: [object Object]
#
# Pass Condition: Script executed successfully
# Fail Condition: Script execution failed
#
# ========================================

```bash
#!/bin/bash

# === 패스워드 파일 보호 점검 스크립트 ===
# ID: U-04
# 생성 시간: $(date)
# 설정값 요약:
# - /etc/passwd 경로: /etc/passwd
# - /etc/shadow 경로: /etc/shadow
# - passwd 권한 허용값: 644
# - shadow 권한 허용값: 600, 640

# 점검 결과 변수 초기화
result="Good"
issue_count=0
recommendations=""

# 파일 존재 여부 및 권한 점검 함수
check_file_permissions() {
    local file_path=$1
    local expected_permissions=$2
    local actual_permissions

    # 파일 존재 여부 확인
    if [[ ! -e $file_path ]]; then
        echo "$file_path: 파일이 존재하지 않습니다."
        result="Vulnerable"
        ((issue_count++))
        recommendations+=" - $file_path 파일이 존재하지 않습니다.\n"
        return
    fi

    # 파일 권한 확인
    actual_permissions=$(stat -c "%a" "$file_path")
    if [[ "$actual_permissions" != "$expected_permissions" ]]; then
        echo "$file_path: 권한이 $actual_permissions 입니다. 예상 권한: $expected_permissions"
        result="Vulnerable"
        ((issue_count++))
        recommendations+=" - $file_path 권한이 잘못 설정되어 있습니다. 현재: $actual_permissions, 예상: $expected_permissions\n"
    else
        echo "$file_path: 권한이 올바르게 설정되어 있습니다. ($actual_permissions)"
    fi
}

# /etc/passwd 파일 점검
check_file_permissions "/etc/passwd" "644"

# /etc/shadow 파일 점검
check_file_permissions "/etc/shadow" "600"

# /etc/shadow 권한 추가 점검 (640 허용)
actual_permissions=$(stat -c "%a" "/etc/shadow")
if [[ "$actual_permissions" == "640" ]]; then
    echo "/etc/shadow: 권한이 올바르게 설정되어 있습니다. ($actual_permissions)"
else
    echo "/etc/shadow: 권한이 $actual_permissions 입니다. 예상 권한: 600 또는 640"
    result="Vulnerable"
    ((issue_count++))
    recommendations+=" - /etc/shadow 권한이 잘못 설정되어 있습니다. 현재: $actual_permissions, 예상: 600 또는 640\n"
fi

# === 점검 결과 리포트 ===
echo "=== 패스워드 파일 보호 점검 결과 ==="
echo "점검 시간: $(date)"
echo "설정 적용: [주요 설정값들 요약]"
echo ""

# 점검 항목 결과 출력
echo "1. /etc/passwd 파일 점검"
if [[ "$result" == "Good" ]]; then
    echo "   [PASS] 모든 점검 항목이 통과했습니다."
else
    echo "   [FAIL] 문제 발견: $issue_count개"
fi

echo ""
echo "2. /etc/shadow 파일 점검"
if [[ "$result" == "Good" ]]; then
    echo "   [PASS] 모든 점검 항목이 통과했습니다."
else
    echo "   [FAIL] 문제 발견: $issue_count개"
fi

# === 점검 결과 요약 ===
echo ""
echo "=== 점검 결과 요약 ==="
echo "전체 평가: $result"
echo "발견된 문제: $issue_count개"
if [[ $issue_count -gt 0 ]]; then
    echo -e "권장 조치사항:\n$recommendations"
else
    echo "권장 조치사항: 없음"
fi
```