# ========================================
# NCU Script Generator - Auto Generated Script
# ========================================
#
# Script ID: script_1758781848700_wjeohsicr
# Generated: 2025-09-25T06:30:49.083Z
# Script Type: OS-Linux
# Target Product: Unknown
# Generated By: NCU Script Generator User
#
# Configuration:
# - Target OS: Linux
# - Process Name: 
# - Config Path: 
# - Account Name: 
# - Output Format: bash
#
# Test Results:
# - Status: FAILED
# - Success Rate: 0%
# - Summary: [object Object]
#
# Pass Condition: 
# Fail Condition: 
#
# ========================================

```bash
#!/bin/bash
# U-60: SSH 원격접속 보안 설정 점검 스크립트
# 최종 수정: 2024-07-17
# 작성자: 보안 점검 자동화 시스템

echo "=== U-60 점검 결과 ==="
echo "점검 시간: $(date)"
echo "설정 적용: PermitRootLogin=no, Protocol=2, AllowUsers=미설정"
echo ""

# 루트 권한 확인
if [ "$(id -u)" -ne 0 ]; then
    echo "[WARN] 루트 권한으로 실행되어야 정확한 점검을 수행할 수 있습니다."
    echo ""
fi

# 주요 변수 설정
SSHD_CONFIG="/etc/ssh/sshd_config"
CHECK_RESULTS=()
SECURITY_ISSUES=0

# 1. SSH 서비스 활성화 상태 점검
check_service_status() {
    echo "1. SSH 서비스 실행 상태 확인:"
    if systemctl is-active sshd &>/dev/null || systemctl is-active ssh &>/dev/null; then
        CHECK_RESULTS+=("SSH 서비스가 실행 중입니다.")
        echo "   [WARN] SSH 서비스가 활성화되어 있습니다."
        SECURITY_ISSUES=$((SECURITY_ISSUES+1))
    else
        CHECK_RESULTS+=("SSH 서비스가 비활성화 상태입니다.")
        echo "   [PASS] SSH 서비스가 실행 중이 아닙니다."
    fi
}

# 2. SSH 설정 파일 분석
check_sshd_config() {
    echo ""
    echo "2. SSH 설정 파일 분석 ($SSHD_CONFIG):"
    
    if [ ! -f "$SSHD_CONFIG" ]; then
        echo "   [FAIL] SSH 설정 파일이 존재하지 않습니다."
        SECURITY_ISSUES=$((SECURITY_ISSUES+1))
        return
    fi

    # 파일 권한 및 소유자 확인
    PERM=$(stat -c "%a" "$SSHD_CONFIG")
    OWNER=$(stat -c "%U" "$SSHD_CONFIG")
    if [ "$PERM" -gt 600 ] || [ "$OWNER" != "root" ]; then
        echo "   [FAIL] 설정 파일 권한 불안전 (권한: $PERM, 소유자: $OWNER)"
        SECURITY_ISSUES=$((SECURITY_ISSUES+1))
    else
        echo "   [PASS] 설정 파일 권한 적절 (권한: $PERM, 소유자: $OWNER)"
    fi

    # 주요 보안 설정 확인
    check_config_value "PermitRootLogin" "no"
    check_config_value "Protocol" "2"
    check_config_value "PasswordAuthentication" "no"
    check_config_value "AllowUsers" ""
}

check_config_value() {
    local key="$1"
    local expected="$2"
    local value=$(grep -i "^$key" "$SSHD_CONFIG" | awk '{print $2}')

    if [ -z "$value" ]; then
        echo "   [WARN] $key 설정이 존재하지 않습니다."
        SECURITY_ISSUES=$((SECURITY_ISSUES+1))
        return
    fi

    if [ "$value" != "$expected" ]; then
        echo "   [FAIL] $key 설정 불일치 (현재 값: $value, 예상 값: $expected)"
        SECURITY_ISSUES=$((SECURITY_ISSUES+1))
    else
        echo "   [PASS] $key 설정 적절 ($value)"
    fi
}

# 3. 네트워크 리스닝 포트 확인
check_listening_ports() {
    echo ""
    echo "3. 네트워크 리스닝 포트 확인:"
    PORT=$(grep "^Port" "$SSHD_CONFIG" 2>/dev/null | awk '{print $2}')
    PORT=${PORT:-22}

    if ss -tuln | grep -q ":${PORT} "; then
        echo "   [WARN] SSH가 포트 $PORT 에서 리스닝 중입니다."
        SECURITY_ISSUES=$((SECURITY_ISSUES+1))
    else
        echo "   [PASS] SSH 포트 비활성화 상태"
    fi
}

# 4. 보안 권장사항 확인
security_recommendations() {
    echo ""
    echo "=== 점검 결과 요약 ==="
    echo "전체 평가: $( (SECURITY_ISSUES > 0) && echo "Vulnerable" || echo "Good" )"
    echo "발견된 문제: $SECURITY_ISSUES 개"
    echo ""
    echo "권장 조치사항:"
    [ $SECURITY_ISSUES -gt 0 ] && {
        echo "1. 불필요한 SSH 서비스 비활성화:"
        echo "   systemctl disable --now sshd"
        echo "2. 보안 설정 강화:"
        echo "   - PermitRootLogin no 설정 확인"
        echo "   - Protocol 2 설정 강제"
        echo "   - AllowUsers로 접근 허용 사용자 지정"
        echo "3. 네트워크 접근 제어:"
        echo "   - 방화벽을 통해 SSH 포트 접근 제한"
        echo "4. 추가 보안 조치:"
        echo "   - 키 기반 인증 전환"
        echo "   - 실패 로그인 시도 모니터링"
    } || echo "모든 보안 설정이 적절히 구성되었습니다."
}

# 메인 실행
check_service_status
check_sshd_config
check_listening_ports
security_recommendations
```