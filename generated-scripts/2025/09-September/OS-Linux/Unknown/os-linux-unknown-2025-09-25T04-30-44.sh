# ========================================
# NCU Script Generator - Auto Generated Script
# ========================================
#
# Script ID: script_1758774643860_8p7zmh8h9
# Generated: 2025-09-25T04:30:44.412Z
# Script Type: OS-Linux
# Target Product: Unknown
# Generated By: NCU Script Generator User
#
# Configuration:
# - Target OS: Linux
# - Process Name: 
# - Config Path: 
# - Account Name: 
# - Output Format: bash
#
# Test Results:
# - Status: FAILED
# - Success Rate: 0%
# - Summary: [object Object]
#
# Pass Condition: 
# Fail Condition: 
#
# ========================================

```bash
#!/bin/bash

# U-69 NFS 접근통제/exports 설정 점검
# 2024-01-01 
# 주요 설정: root 소유권, exports 파일 권한, 익명 접근 제한

echo "=== U-69 NFS 접근통제/exports 설정 점검 ==="
echo "점검 시작: $(date)"

# 필수 파일 경로 설정
EXPORTS_FILE="/etc/exports"
REQUIRED_OWNER="root"
REQUIRED_GROUP="root" 
REQUIRED_PERM="644"

# 결과 저장 변수
VULNERABLE=0
FOUND_ISSUES=0

# exports 파일 존재 여부 확인
if [ ! -f "$EXPORTS_FILE" ]; then
    echo "[INFO] $EXPORTS_FILE 파일이 존재하지 않습니다."
    echo "NFS 서비스가 설치되지 않았거나 설정되지 않은 것으로 판단됩니다."
    exit 0
fi

echo "1. exports 파일 권한 점검"

# 소유자:그룹 점검
CURRENT_OWNER=$(stat -c '%U' $EXPORTS_FILE)
CURRENT_GROUP=$(stat -c '%G' $EXPORTS_FILE)

if [ "$CURRENT_OWNER" != "$REQUIRED_OWNER" ] || [ "$CURRENT_GROUP" != "$REQUIRED_GROUP" ]; then
    echo "[FAIL] 파일 소유자 및 그룹이 올바르지 않습니다."
    echo "현재: $CURRENT_OWNER:$CURRENT_GROUP"
    echo "필요: $REQUIRED_OWNER:$REQUIRED_GROUP"
    VULNERABLE=1
    ((FOUND_ISSUES++))
else
    echo "[PASS] 파일 소유자 및 그룹이 올바르게 설정되어 있습니다."
fi

# 권한 점검
CURRENT_PERM=$(stat -c '%a' $EXPORTS_FILE)

if [ "$CURRENT_PERM" != "$REQUIRED_PERM" ]; then
    echo "[FAIL] 파일 권한이 올바르지 않습니다."
    echo "현재: $CURRENT_PERM"
    echo "필요: $REQUIRED_PERM"
    VULNERABLE=1
    ((FOUND_ISSUES++))
else
    echo "[PASS] 파일 권한이 올바르게 설정되어 있습니다."
fi

echo -e "\n2. exports 설정 내용 점검"

# exports 파일 내용 분석
if [ -r "$EXPORTS_FILE" ]; then
    # 익명 접근 설정 점검
    if grep -E "all_squash|no_root_squash" "$EXPORTS_FILE" > /dev/null; then
        echo "[FAIL] 익명 사용자 접근이 허용된 설정이 있습니다:"
        grep -E "all_squash|no_root_squash" "$EXPORTS_FILE"
        VULNERABLE=1
        ((FOUND_ISSUES++))
    else
        echo "[PASS] 익명 사용자 접근이 제한되어 있습니다."
    fi

    # 호스트 접근 제한 점검
    if grep "*" "$EXPORTS_FILE" > /dev/null; then
        echo "[FAIL] 모든 호스트에 대한 접근이 허용되어 있습니다:"
        grep "*" "$EXPORTS_FILE"
        VULNERABLE=1
        ((FOUND_ISSUES++))
    else
        echo "[PASS] 호스트 기반 접근 제한이 설정되어 있습니다."
    fi
else
    echo "[ERROR] exports 파일을 읽을 수 없습니다."
    VULNERABLE=1
    ((FOUND_ISSUES++))
fi

echo -e "\n3. NFS 서비스 상태 점검"

# NFS 서비스 상태 확인
if systemctl is-active nfs-server > /dev/null 2>&1; then
    echo "[INFO] NFS 서비스가 실행 중입니다."
    
    # 포트 점검
    if netstat -tuln | grep -E ":2049|:111" > /dev/null; then
        echo "[WARN] NFS 관련 포트가 열려있습니다:"
        netstat -tuln | grep -E ":2049|:111"
    fi
else
    echo "[INFO] NFS 서비스가 실행 중이지 않습니다."
fi

echo -e "\n=== 점검 결과 요약 ==="
if [ $VULNERABLE -eq 1 ]; then
    echo "전체 평가: Vulnerable (취약)"
    echo "발견된 문제: $FOUND_ISSUES 건"
    echo -e "\n권장 조치사항:"
    echo "1. exports 파일의 소유자와 권한을 수정하세요:"
    echo "   chown root:root $EXPORTS_FILE"
    echo "   chmod 644 $EXPORTS_FILE"
    echo "2. 익명 사용자 접근을 제한하세요:"
    echo "   - all_squash, no_root_squash 옵션 제거"
    echo "3. 호스트 기반 접근 제한을 설정하세요:"
    echo "   - * 대신 구체적인 IP 주소나 네트워크 대역 지정"
else
    echo "전체 평가: Good (양호)"
    echo "발견된 문제: 없음"
fi

echo -e "\n점검 완료: $(date)"
```