# ========================================
# NCU Script Generator - Auto Generated Script
# ========================================
#
# Script ID: 694c0a4b-b86c-4bb5-9574-77cf63d11925_1759380758741
# Generated: 2025-10-02T04:52:39.087Z
# Asset Type: OS
# Script Type: OS-Linux
# Target Product: Unknown
# Generated By: NCU Script Generator User
#
# File Information:
# - File Name: OS--Unknown--OSLinux-unknown-process.sh
# - Time-based Folder: 2025-10-02-13h
# - Full Path: /2025-10-02-13h/OS--Unknown--OSLinux-unknown-process.sh
#
# Configuration:
# - Target OS: Linux
# - Process Name: unknown-process
# - Config Path: /etc/default/config
# - Account Name: default-account
# - Output Format: bash
#
# Test Results:
# - Status: FAILED
# - Success Rate: 0%
# - Summary: [object Object]
#
# Pass Condition: Script executed successfully
# Fail Condition: Script execution failed
#
# ========================================

```bash
#!/bin/bash

# === 파일/디렉터리 소유자 설정 점검 스크립트 ===
# 스크립트 ID: U-06
# 카테고리: 파일보안
# 난이도: medium
# 위험도: medium
# 생성 시간: $(date)
# 설정 적용: 중요 파일 목록 - /etc/passwd, /etc/shadow, /etc/group; 허용 소유자:그룹 - root:root

# 점검할 파일 목록
FILES=("/etc/passwd" "/etc/shadow" "/etc/group")
# 허용된 소유자와 그룹
ALLOWED_OWNER="root"
ALLOWED_GROUP="root"

# 점검 결과 초기화
PASS_COUNT=0
FAIL_COUNT=0

# 점검 결과를 저장할 배열
RESULTS=()

# 파일 소유자 및 그룹 점검 함수
check_file_ownership() {
    local file=$1
    if [ ! -e "$file" ]; then
        # 파일이 존재하지 않는 경우
        RESULTS+=("$file: FAIL - 파일이 존재하지 않습니다.")
        ((FAIL_COUNT++))
    elif [ ! -r "$file" ]; then
        # 파일을 읽을 수 없는 경우
        RESULTS+=("$file: FAIL - 파일을 읽을 수 있는 권한이 없습니다.")
        ((FAIL_COUNT++))
    else
        # 파일 소유자 및 그룹 점검
        local owner=$(stat -c '%U' "$file")
        local group=$(stat -c '%G' "$file")
        if [ "$owner" == "$ALLOWED_OWNER" ] && [ "$group" == "$ALLOWED_GROUP" ]; then
            RESULTS+=("$file: PASS - 소유자와 그룹이 올바르게 설정되어 있습니다.")
            ((PASS_COUNT++))
        else
            RESULTS+=("$file: FAIL - 소유자 또는 그룹이 올바르지 않습니다. (현재: $owner:$group)")
            ((FAIL_COUNT++))
        fi
    fi
}

# 모든 파일에 대해 점검 수행
for file in "${FILES[@]}"; do
    check_file_ownership "$file"
done

# === 점검 결과 보고 ===
echo "=== 파일/디렉터리 소유자 설정 점검 결과 ==="
echo "점검 시간: $(date)"
echo "설정 적용: 중요 파일 목록 - ${FILES[*]}; 허용 소유자:그룹 - $ALLOWED_OWNER:$ALLOWED_GROUP"
echo

# 각 파일에 대한 점검 결과 출력
for result in "${RESULTS[@]}"; do
    echo "$result"
done

# === 점검 결과 요약 ===
echo
echo "=== 점검 결과 요약 ==="
if [ "$FAIL_COUNT" -eq 0 ]; then
    echo "전체 평가: Good"
else
    echo "전체 평가: Vulnerable"
    echo "발견된 문제: $FAIL_COUNT 개"
    echo "권장 조치사항: 파일 소유자 및 그룹을 $ALLOWED_OWNER:$ALLOWED_GROUP 으로 설정하세요."
fi
```